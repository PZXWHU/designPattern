/**
 * 工厂模式是用来封装对象的创建。
 *
 * 简单工厂：其实不是一种设计模式，而是一种编程习惯。将创建具体对象的任务放在一个专门的简单工厂类中。
 * 静态工厂：将创建方法申明为静态方法，但是这样就不能通过继承来改变创建方法的行为。
 *
 * 工厂方法模式：定义一个创建对象的接口（抽象方法），但由子类决定要实例化的类是哪一个。工厂方法将实例化推迟到子类。
 * 分为创建者和产品类
 * 创建者通常会包含依赖抽象产品的代码，而这些抽象产品由创建者子类构建，创建者不需要知道在制造哪些具体的产品，只需要关注如何使用产品。
 *
 *
 * 抽象工厂模式：提供一个接口，用于创建依赖对象的家族，而不需要明确制定具体类
 * 抽象工厂允许客户使用抽象的接口来创建一组相关的产品，而不需要知道实际产生的具体产品是什么。
 *
 *
 * 工厂方法模式使用的是类的继承。利用工厂方法创建对象需要扩展一个类，并覆盖他的工厂方法。客户只需要知道他们所使用的是抽象类型就可以了，而由子类负责决定具体类型。
 * 抽象工厂模式使用的是对象的组合，其提供了一个可以创建产品家族的抽象类型，这个类型的子类定义了产品被创建的方法。要想使用这个工厂，必须先实例化工厂。抽象工厂的一个优点是把一组产品组合起来，但是如果新增产品，则需要改变接口。
 * 抽象工厂使用工厂方法来实现具体的工厂。
 *
 * 工厂方法模式中，父类的代码中使用抽象工厂方法创建产品，并进行使用。而抽象工厂模式中，抽象工厂并没有直接使用所创建产品的代码，而且返回创建产品。通常抽象工厂负责创建产品族。
 *
 * https://www.cnblogs.com/yssjun/p/11102162.html
 */
package com.pzx.factory;